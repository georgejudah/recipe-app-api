commands------------
docker-compose run app sh -c "python manage.py createsuperuser" - for creating admin, super user
docker-compose up - runs the application
docker-compose run app sh -c "python manage.py test" - run tests, tests- should start with filename as test

----------------------------UNIT TEST-------------------------------
remember that the file should start with test, and the folder in which it is present should also contain __init__.py file (since that's what makes it a Python module!).
small_unit_Test_example

class CalcTests(TestCase):
    def  test_add_numbers(self):
        """Test that the two numbers are added together"""

        self.assertEqual(add(3,8), 11)
    
    def test_subtract_numbers(self):
        """Test that the two numbers are subtracted and returned"""
        
        self.assertEqual(subtract(6,3), 3)

---------Docker Compose DB ----------------------------------------------------
post_gres docker hub - https://hub.docker.com/_/postgres/
https://gist.github.com/LondonAppDev/d9fc723784146650c7032a5752e7a9b - db docker compose config

env variables in docker compose
https://docs.docker.com/compose/environment-variables/
environment:
        - POSTGRES_DB=app
        - POSTGRES_USER = postgres
        - POSTGRES_PASSWORD = supersecretpassword

then, requirements.txt for postgres
psycopg2>=2.7.5,<2.8.0

in docker file
COPY ./requirements.txt /requirements.txt
RUN apk add --update --no-cache postgresql-client
RUN apk add --update --no-cache --virtual .tmp-build-deps \
    gcc libc-dev linux-headers postgresql-dev
RUN pip install -r /requirements.txt

this is the important line we add
RUN apk add --update --no-cache postgresql-client- #absolute min footprint
RUN apk add --update --no-cache --virtual .tmp-build-deps \
    gcc libc-dev linux-headers postgresql-dev


--------------- settings.py config for postgresql ---------------------------
DATABASES = {
    'default': {
        'ENGINE' : 'django.db.backends.postgresql',
        'HOST' :    os.environ.get('DB_HOST'),
        'NAME' : os.environ.get('DB_NAME'),
        'USER' : os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASS'), 

    }
}

--------- Testing - Mocking------------------

Never write Unit tests that depend on external services- can't guarantee that they will be available
Never send spam emails
which will end up clogging up email server

Use mocking to avoid sending an actual email, by using an mocking object- u can still check the function working
with the parameters
--------------------------------------------------------
----- Application DB reliable, wait for DB to get up and running before trying to connect to it-------



-----------MAKE DOCKER COMPOSE WAIT FOR DB---------------------------
 command: >
     sh -c "python manage.py wait_for_db && 
            python manage.py migrate &&
            python manage.py runserver 0.0.0.0:80000"

but before that main app > core > mkdir management > mkdir commands touch __init__.py> cd commands > touch __init__.py > touch wait_for_db.py

inside wait_for_db.py,
import time

from django.db import connections
from django.db.utils import OperationalError
from django.core.management.base import BaseCommand

class Command(BaseCommand):
    """Django command to pause execution until database is available"""

    def handle(self, *args, **options):
        self.stdout.write('Waiting for database.....')
        db_conn = None
        while not db_conn:
            try:
                db_conn = connections['default']
            except OperationalError:
                self.stdout.write('Database is unavailable, waiting 1 second')
                time.sleep(1)
        self.stdout.write(self.style.SUCCESS('Database available!'))
----------------------------------------------------------------------------